
ATinyRXv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000584  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040c  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000453  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	82 c1       	rjmp	.+772    	; 0x308 <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	34 c1       	rjmp	.+616    	; 0x276 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a1 37       	cpi	r26, 0x71	; 113
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	04 d1       	rcall	.+520    	; 0x236 <main>
  2e:	a1 c1       	rjmp	.+834    	; 0x372 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <_Z4Initv>:

//start all over
//if hardReset is 1 we also clear packet buffer!
void Init(){
	//PORTB &= ~(1<<LEDPIN);//debug led off!
	rx = 0; //start again looking for sync
  32:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <rx>
	bit = 0; //reset bit counter
  36:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <bit>
	millisecs = 0; // 0ms
  3a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <millisecs>
	TCNT0 = 0; //also reset hw timer
  3e:	12 be       	out	0x32, r1	; 50
	GIMSK |= (1<<INT0); //re-enable those INT0 interrupts we are in sync!
  40:	8b b7       	in	r24, 0x3b	; 59
  42:	80 64       	ori	r24, 0x40	; 64
  44:	8b bf       	out	0x3b, r24	; 59
  46:	08 95       	ret

00000048 <_Z8Evaluatev>:
		if(rx==10)bitHandler();//check,vote and evaluate bits'n packets while we have possible sync!
	}
}

void Evaluate(){
		for (int8_t i  = goodPackCount; i>=0;i--){
  48:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <goodPackCount>
  4c:	87 ff       	sbrs	r24, 7
  4e:	0f c0       	rjmp	.+30     	; 0x6e <_Z8Evaluatev+0x26>
				}
			}
		}
	
	for (int8_t i = 0; i<repeatsExpected;i++) {
		datapack[i] = 0; //clear datapacks!
  50:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <datapack>
  54:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <datapack+0x1>
  58:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <datapack+0x2>
	}
	PORTB &= ~((1<<REDLED) | (1<<GREENLED) | (1<<BLUELED));//all off!
  5c:	88 b3       	in	r24, 0x18	; 24
  5e:	83 7e       	andi	r24, 0xE3	; 227
  60:	88 bb       	out	0x18, r24	; 24
	if(lastdata == 0) PORTB |= (1<<REDLED);
  62:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <lastdata>
  66:	81 11       	cpse	r24, r1
  68:	1f c0       	rjmp	.+62     	; 0xa8 <__stack+0x9>
  6a:	c2 9a       	sbi	0x18, 2	; 24
  6c:	1d c0       	rjmp	.+58     	; 0xa8 <__stack+0x9>
	}
}

void Evaluate(){
		for (int8_t i  = goodPackCount; i>=0;i--){
			for (int8_t l = goodPackCount;l>=0;l--){
  6e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <goodPackCount>
				if(i==l) continue;
				if(datapack[i] == datapack[l]){
  72:	e8 2f       	mov	r30, r24
  74:	08 2e       	mov	r0, r24
  76:	00 0c       	add	r0, r0
  78:	ff 0b       	sbc	r31, r31
  7a:	e7 59       	subi	r30, 0x97	; 151
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
	}
}

void Evaluate(){
		for (int8_t i  = goodPackCount; i>=0;i--){
			for (int8_t l = goodPackCount;l>=0;l--){
  7e:	97 fd       	sbrc	r25, 7
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__stack+0x5>
				if(i==l) continue;
  82:	89 17       	cp	r24, r25
  84:	69 f0       	breq	.+26     	; 0xa0 <__stack+0x1>
				if(datapack[i] == datapack[l]){
  86:	30 81       	ld	r19, Z
  88:	a9 2f       	mov	r26, r25
  8a:	09 2e       	mov	r0, r25
  8c:	00 0c       	add	r0, r0
  8e:	bb 0b       	sbc	r27, r27
  90:	a7 59       	subi	r26, 0x97	; 151
  92:	bf 4f       	sbci	r27, 0xFF	; 255
  94:	2c 91       	ld	r18, X
  96:	32 13       	cpse	r19, r18
  98:	03 c0       	rjmp	.+6      	; 0xa0 <__stack+0x1>
					lastdata = datapack[i];
  9a:	20 81       	ld	r18, Z
  9c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <lastdata>
  a0:	91 50       	subi	r25, 0x01	; 1
	}
}

void Evaluate(){
		for (int8_t i  = goodPackCount; i>=0;i--){
			for (int8_t l = goodPackCount;l>=0;l--){
  a2:	ed cf       	rjmp	.-38     	; 0x7e <_Z8Evaluatev+0x36>
  a4:	81 50       	subi	r24, 0x01	; 1
		if(rx==10)bitHandler();//check,vote and evaluate bits'n packets while we have possible sync!
	}
}

void Evaluate(){
		for (int8_t i  = goodPackCount; i>=0;i--){
  a6:	d2 cf       	rjmp	.-92     	; 0x4c <_Z8Evaluatev+0x4>
	for (int8_t i = 0; i<repeatsExpected;i++) {
		datapack[i] = 0; //clear datapacks!
	}
	PORTB &= ~((1<<REDLED) | (1<<GREENLED) | (1<<BLUELED));//all off!
	if(lastdata == 0) PORTB |= (1<<REDLED);
	if(lastdata == 1) PORTB |= (1<<BLUELED);
  a8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <lastdata>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	09 f4       	brne	.+2      	; 0xb2 <__stack+0x13>
  b0:	c4 9a       	sbi	0x18, 4	; 24
	if(lastdata == 2) PORTB |= (1<<GREENLED);
  b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <lastdata>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	09 f4       	brne	.+2      	; 0xbc <__stack+0x1d>
  ba:	c3 9a       	sbi	0x18, 3	; 24
	
	goodPackCount=0; //restart packet counter
  bc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <goodPackCount>
	msSincePacket = 0; //no packets yet, no errors!
  c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <msSincePacket>
	Init();
  c4:	b6 cf       	rjmp	.-148    	; 0x32 <_Z4Initv>

000000c6 <_Z10bitHandlerv>:
	static uint8_t chan = 0;
	static int32_t bitvote = 0; //big enough?
	static uint8_t currentbit = 0; //the bit we are currently on!
	uint8_t bitval = 0;
	
	if(bit == 0) { //we're starting all over again, get ready!
  c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bit>
  ca:	81 11       	cpse	r24, r1
  cc:	08 c0       	rjmp	.+16     	; 0xde <_Z10bitHandlerv+0x18>
		currentbit = 0;//reset last bit if we start from beginning bit
  ce:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <_ZZ10bitHandlervE10currentbit>
		chan = 0; //no channel at beginning!
  d2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <_ZZ10bitHandlervE4chan>
		rx_packet_raw = 0; //first bit... reset our raw_packet
  d6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_ZZ10bitHandlervE13rx_packet_raw+0x1>
  da:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ10bitHandlervE13rx_packet_raw>
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ea:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
	
	(PINB & (1<<RXPIN)) ? bitvote++ : bitvote--; //another vote for our new bit!!
  ee:	b1 9b       	sbis	0x16, 1	; 22
  f0:	04 c0       	rjmp	.+8      	; 0xfa <_Z10bitHandlerv+0x34>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <_Z10bitHandlerv+0x3a>
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	a1 09       	sbc	r26, r1
  fe:	b1 09       	sbc	r27, r1
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 108:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 10c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	if(currentbit != bit) { //new bit!	
 110:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <_ZZ10bitHandlervE10currentbit>
 114:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bit>
 118:	42 2f       	mov	r20, r18
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	08 2e       	mov	r0, r24
 11e:	00 0c       	add	r0, r0
 120:	99 0b       	sbc	r25, r25
 122:	48 17       	cp	r20, r24
 124:	59 07       	cpc	r21, r25
 126:	09 f4       	brne	.+2      	; 0x12a <_Z10bitHandlerv+0x64>
 128:	85 c0       	rjmp	.+266    	; 0x234 <_Z10bitHandlerv+0x16e>
		//Evaluate old one first:
		bitval = (bitvote>0) ? 1 : 0; //what did the voting get us?
 12a:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 132:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 136:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		bitvote = 0; //reset the voting for next bit!
 13a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 142:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 146:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
		//Checks'n Sets:
		if (currentbit == 0) {
 14a:	21 11       	cpse	r18, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <_Z10bitHandlerv+0x96>
			if(bitval != 1){//part of the syncbit, if not 1 we got bullshit!
 14e:	14 16       	cp	r1, r20
 150:	15 06       	cpc	r1, r21
 152:	16 06       	cpc	r1, r22
 154:	17 06       	cpc	r1, r23
 156:	0c f4       	brge	.+2      	; 0x15a <_Z10bitHandlerv+0x94>
 158:	45 c0       	rjmp	.+138    	; 0x1e4 <_Z10bitHandlerv+0x11e>
				Init(); 
 15a:	6b cf       	rjmp	.-298    	; 0x32 <_Z4Initv>
				return; 
			}
		} else if(currentbit == 1){
 15c:	21 30       	cpi	r18, 0x01	; 1
 15e:	39 f4       	brne	.+14     	; 0x16e <_Z10bitHandlerv+0xa8>
			if(bitval != 0){//part of the syncbit, if not 0 we got bullshit!
 160:	14 16       	cp	r1, r20
 162:	15 06       	cpc	r1, r21
 164:	16 06       	cpc	r1, r22
 166:	17 06       	cpc	r1, r23
 168:	0c f0       	brlt	.+2      	; 0x16c <_Z10bitHandlerv+0xa6>
 16a:	5d c0       	rjmp	.+186    	; 0x226 <_Z10bitHandlerv+0x160>
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <_Z10bitHandlerv+0x94>
 16e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_ZZ10bitHandlervE4chan>
				Init(); 
				return; 
			}
		} else if(currentbit <= 5) {
 172:	26 30       	cpi	r18, 0x06	; 6
 174:	68 f4       	brcc	.+26     	; 0x190 <_Z10bitHandlerv+0xca>
			//Set channel bit:
			chan = chan<<1;//shift whole chan one to left
 176:	88 0f       	add	r24, r24
			if(bitval) chan |= (1<<0);//set new bit to one or do nothing to leave it at zero!
 178:	14 16       	cp	r1, r20
 17a:	15 06       	cpc	r1, r21
 17c:	16 06       	cpc	r1, r22
 17e:	17 06       	cpc	r1, r23
 180:	1c f0       	brlt	.+6      	; 0x188 <_Z10bitHandlerv+0xc2>
				Init(); 
				return; 
			}
		} else if(currentbit <= 5) {
			//Set channel bit:
			chan = chan<<1;//shift whole chan one to left
 182:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_ZZ10bitHandlervE4chan>
 186:	4f c0       	rjmp	.+158    	; 0x226 <_Z10bitHandlerv+0x160>
			if(bitval) chan |= (1<<0);//set new bit to one or do nothing to leave it at zero!
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_ZZ10bitHandlervE4chan>
 18e:	1e c0       	rjmp	.+60     	; 0x1cc <_Z10bitHandlerv+0x106>
		} else { //or get to datapart here!
			if(chan == channel){ //SO BASICALLY WE GET A 1)LEGIT CHANNEL OR 2)WRONG CHANNEL OR 3)BITERROR
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	19 f7       	brne	.-58     	; 0x15a <_Z10bitHandlerv+0x94>
				msSincePacket = 0; //we just got data... reset timeout counter!
 194:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <msSincePacket>
				datapack[goodPackCount] = datapack[goodPackCount]<<1;//shift pack contents one left!
 198:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <goodPackCount>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <goodPackCount>
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	a7 59       	subi	r26, 0x97	; 151
 1a6:	bf 4f       	sbci	r27, 0xFF	; 255
 1a8:	8c 91       	ld	r24, X
 1aa:	88 0f       	add	r24, r24
 1ac:	e7 59       	subi	r30, 0x97	; 151
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 83       	st	Z, r24
				if(bitval) datapack[goodPackCount] |= (1<<0);//set new bit to one or do nothing to leave it at zero!
 1b2:	14 16       	cp	r1, r20
 1b4:	15 06       	cpc	r1, r21
 1b6:	16 06       	cpc	r1, r22
 1b8:	17 06       	cpc	r1, r23
 1ba:	ac f5       	brge	.+106    	; 0x226 <_Z10bitHandlerv+0x160>
 1bc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <goodPackCount>
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e7 59       	subi	r30, 0x97	; 151
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24
			}
		}
		
		
		//Shift one left and set bit:
		rx_packet_raw = rx_packet_raw<<1;//shift whole raw one to left
 1cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ10bitHandlervE13rx_packet_raw>
 1d0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_ZZ10bitHandlervE13rx_packet_raw+0x1>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
		if(bitval) rx_packet_raw |= (1<<0);//set new bit to one or do nothing to leave it at zero!
 1d8:	14 16       	cp	r1, r20
 1da:	15 06       	cpc	r1, r21
 1dc:	16 06       	cpc	r1, r22
 1de:	17 06       	cpc	r1, r23
 1e0:	44 f4       	brge	.+16     	; 0x1f2 <_Z10bitHandlerv+0x12c>
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <_Z10bitHandlerv+0x12a>
			}
		}
		
		
		//Shift one left and set bit:
		rx_packet_raw = rx_packet_raw<<1;//shift whole raw one to left
 1e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ10bitHandlervE13rx_packet_raw>
 1e8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_ZZ10bitHandlervE13rx_packet_raw+0x1>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
		if(bitval) rx_packet_raw |= (1<<0);//set new bit to one or do nothing to leave it at zero!
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <_ZZ10bitHandlervE13rx_packet_raw+0x1>
 1f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ10bitHandlervE13rx_packet_raw>
		//(bitvote) ? rx_packet_raw |= (1<<reversedBit) : rx_packet_raw &= ~(1<<reversedBit); //set bit as low or high in our raw packet!
		
		
		if(currentbit >= expectedDataBits+5) {//all done!
 1fa:	2d 30       	cpi	r18, 0x0D	; 13
 1fc:	78 f0       	brcs	.+30     	; 0x21c <_Z10bitHandlerv+0x156>
			if(chan == channel) goodPackCount++; //legit packet!? count one up!
 1fe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_ZZ10bitHandlervE4chan>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	29 f4       	brne	.+10     	; 0x210 <_Z10bitHandlerv+0x14a>
 206:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <goodPackCount>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <goodPackCount>
			if(goodPackCount == repeatsExpected) {//we got all of em? bring em home!
 210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <goodPackCount>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <_Z10bitHandlerv+0x154>
				Evaluate(); //evaluate what we got so far!
 218:	17 df       	rcall	.-466    	; 0x48 <_Z8Evaluatev>
			}
			Init(); //wait for next sync
 21a:	0b df       	rcall	.-490    	; 0x32 <_Z4Initv>
		}
		currentbit = bit; //update currentbit!
 21c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bit>
 220:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_ZZ10bitHandlervE10currentbit>
 224:	08 95       	ret
			}
		}
		
		
		//Shift one left and set bit:
		rx_packet_raw = rx_packet_raw<<1;//shift whole raw one to left
 226:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ10bitHandlervE13rx_packet_raw>
 22a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_ZZ10bitHandlervE13rx_packet_raw+0x1>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	df cf       	rjmp	.-66     	; 0x1f2 <_Z10bitHandlerv+0x12c>
 234:	08 95       	ret

00000236 <main>:
void Init();
void Evaluate();

int main()
{
	OSCCAL = 86; //internal osci callibrate
 236:	86 e5       	ldi	r24, 0x56	; 86
 238:	81 bf       	out	0x31, r24	; 49
	TCCR0B |= (1<<CS01); //timer prescale 8
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	83 bf       	out	0x33, r24	; 51
	TCCR0A |= (1<<WGM01); //clear on compare match
 240:	8f b5       	in	r24, 0x2f	; 47
 242:	82 60       	ori	r24, 0x02	; 2
 244:	8f bd       	out	0x2f, r24	; 47
	OCR0A = 149; //compare match for timer (9,6mhz/8 = 1,2mhz/8 = 150.000hz/150 = 1.000 interrups per sec)
 246:	85 e9       	ldi	r24, 0x95	; 149
 248:	86 bf       	out	0x36, r24	; 54
	DDRB |= (1<<REDLED) | (1<<GREENLED) | (1<<BLUELED); //output to LED
 24a:	87 b3       	in	r24, 0x17	; 23
 24c:	8c 61       	ori	r24, 0x1C	; 28
 24e:	87 bb       	out	0x17, r24	; 23
	
	/*start timer*/
	TIFR0 |= (1<<OCF0A); //interrupt on timer
 250:	88 b7       	in	r24, 0x38	; 56
 252:	84 60       	ori	r24, 0x04	; 4
 254:	88 bf       	out	0x38, r24	; 56
	TIMSK0 |= (1<<OCIE0A);
 256:	89 b7       	in	r24, 0x39	; 57
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	89 bf       	out	0x39, r24	; 57
	
	/*pinchange interrupt enable on INT0 */
	MCUCR |= (1<<ISC00); //generate Interrupt on any Change here!
 25c:	85 b7       	in	r24, 0x35	; 53
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0); //interrupt enable on INT0
 262:	8b b7       	in	r24, 0x3b	; 59
 264:	80 64       	ori	r24, 0x40	; 64
 266:	8b bf       	out	0x3b, r24	; 59
	sei();//interrupts on!
 268:	78 94       	sei
	while (1)
	{
		if(rx==10)bitHandler();//check,vote and evaluate bits'n packets while we have possible sync!
 26a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <rx>
 26e:	8a 30       	cpi	r24, 0x0A	; 10
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x34>
 272:	29 df       	rcall	.-430    	; 0xc6 <_Z10bitHandlerv>
 274:	fa cf       	rjmp	.-12     	; 0x26a <main+0x34>

00000276 <__vector_6>:
/*
Der Timer Compare Interrupt Handler
wird alle 1ms aufgerufen!
*/
ISR (TIM0_COMPA_vect)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	millisecs++;
 298:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <millisecs>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <millisecs>
	
	if(msSincePacket >= msTimeout) {
 2a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <msSincePacket>
 2a6:	8f 3f       	cpi	r24, 0xFF	; 255
 2a8:	09 f4       	brne	.+2      	; 0x2ac <__vector_6+0x36>
		//its been some time since last legit packet... 
		Evaluate();
 2aa:	ce de       	rcall	.-612    	; 0x48 <_Z8Evaluatev>
	//if(msSincePacket > ( (expectedDataBits+8)*pulselength)*repeatsExpected) { //timeout
		//for (int8_t i = 0; i<repeatsExpected;i++)datapack[i] = 0; //clear datapacks!	
		//msSincePacket=0; //reset counter!
		//Evaluate();
	//}
	if(rx == 10) {//what to do after syncing:
 2ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <rx>
 2b0:	8a 30       	cpi	r24, 0x0A	; 10
 2b2:	c9 f4       	brne	.+50     	; 0x2e6 <__vector_6+0x70>
		//if(msSincePacket > 500) Evaluate(); //timeout!
		msSincePacket++;//timeout counter one up... gets reset if valid pack came in!
 2b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <msSincePacket>
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <msSincePacket>
		if(millisecs == (bit+1)*pulselength) bit++; //next sector!!
 2be:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <millisecs>
 2c2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bit>
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	08 2e       	mov	r0, r24
 2ca:	00 0c       	add	r0, r0
 2cc:	99 0b       	sbc	r25, r25
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	6a e0       	ldi	r22, 0x0A	; 10
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	3d d0       	rcall	.+122    	; 0x350 <__mulhi3>
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	29 f4       	brne	.+10     	; 0x2e6 <__vector_6+0x70>
 2dc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bit>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <bit>
	}
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_1>:

/*
Der Pinchange Interrupt Handler
*/
ISR (INT0_vect){
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
	if(rx == 0 && (PINB & (1<<RXPIN)) && millisecs >= pulselength-1 && millisecs <= pulselength+1) { //just got out of a whole low pulse -> sync?!
 314:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <rx>
 318:	81 11       	cpse	r24, r1
 31a:	0a c0       	rjmp	.+20     	; 0x330 <__vector_1+0x28>
 31c:	b1 9b       	sbis	0x16, 1	; 22
 31e:	08 c0       	rjmp	.+16     	; 0x330 <__vector_1+0x28>
 320:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <millisecs>
 324:	89 30       	cpi	r24, 0x09	; 9
 326:	20 f0       	brcs	.+8      	; 0x330 <__vector_1+0x28>
 328:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <millisecs>
 32c:	8c 30       	cpi	r24, 0x0C	; 12
 32e:	48 f0       	brcs	.+18     	; 0x342 <__vector_1+0x3a>
		rx=10;//check for data!
		GIMSK &= ~(1<<INT0); //disable pin change Interrupts while we do data stuff!
	}
	millisecs = 0; //0ms
 330:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <millisecs>
	TCNT0 = 0; //also reset hw timer
 334:	12 be       	out	0x32, r1	; 50
 336:	8f 91       	pop	r24
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti
/*
Der Pinchange Interrupt Handler
*/
ISR (INT0_vect){
	if(rx == 0 && (PINB & (1<<RXPIN)) && millisecs >= pulselength-1 && millisecs <= pulselength+1) { //just got out of a whole low pulse -> sync?!
		rx=10;//check for data!
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <rx>
		GIMSK &= ~(1<<INT0); //disable pin change Interrupts while we do data stuff!
 348:	8b b7       	in	r24, 0x3b	; 59
 34a:	8f 7b       	andi	r24, 0xBF	; 191
 34c:	8b bf       	out	0x3b, r24	; 59
 34e:	f0 cf       	rjmp	.-32     	; 0x330 <__vector_1+0x28>

00000350 <__mulhi3>:
 350:	00 24       	eor	r0, r0
 352:	55 27       	eor	r21, r21
 354:	04 c0       	rjmp	.+8      	; 0x35e <__mulhi3+0xe>
 356:	08 0e       	add	r0, r24
 358:	59 1f       	adc	r21, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	29 f0       	breq	.+10     	; 0x36c <__mulhi3+0x1c>
 362:	76 95       	lsr	r23
 364:	67 95       	ror	r22
 366:	b8 f3       	brcs	.-18     	; 0x356 <__mulhi3+0x6>
 368:	71 05       	cpc	r23, r1
 36a:	b9 f7       	brne	.-18     	; 0x35a <__mulhi3+0xa>
 36c:	80 2d       	mov	r24, r0
 36e:	95 2f       	mov	r25, r21
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
